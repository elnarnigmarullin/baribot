from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
import asyncio
from config import BOT_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è dp
from handlers import start, imt, calories, diary, symptoms, history, export, doctor_panel, reminders

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
start.register_handlers(dp)
imt.register_handlers(dp)
calories.register_handlers(dp)
diary.register_handlers(dp)
symptoms.register_handlers(dp)
history.register_handlers(dp)
export.register_handlers(dp)
reminders.register_handlers(dp)
doctor_panel.register_handlers(dp)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from utils.storage import load_data

scheduler = AsyncIOScheduler()

async def send_mass_reminder(text: str):
    all_data = load_data()
    for user_id, user_info in all_data.items():
        if user_info.get("reminders") == True:
            try:
                await bot.send_message(chat_id=int(user_id), text=text)
            except Exception as e:
                logging.warning(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")

async def water_job():
    await send_mass_reminder("üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ –≤—ã–ø–∏—Ç—å –≤–æ–¥—É")

async def meal_job():
    await send_mass_reminder("üçΩÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ –ø–æ–µ—Å—Ç—å")

async def survey_job():
    await send_mass_reminder("üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è")

scheduler.add_job(water_job, 'cron', hour=10, minute=0)
scheduler.add_job(meal_job, 'cron', hour=13, minute=0)
scheduler.add_job(survey_job, 'cron', hour=18, minute=0)
async def on_startup(dispatcher):
    scheduler.start()
    logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)