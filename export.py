from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from datetime import date
from utils.storage import load_data

async def export_handler(message: types.Message):
    user_id = str(message.from_user.id)
    all_data = load_data()
    data = all_data.get(user_id, {})
    today = date.today().isoformat()

    if not data:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    export_lines = [f"üì§ –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∑–∞ {today}:\n"]

    # –ò–ú–¢
    if "imt" in data:
        export_lines.append(f"üìè –ò–ú–¢: {data['imt']}")

    # –ö–∞–ª–æ—Ä–∞–∂
    if "calories" in data:
        export_lines.append(f"üî• –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {data['calories']} –∫–∫–∞–ª")

    # –î–Ω–µ–≤–Ω–∏–∫
    diary_entries = data.get("diary", {}).get(today, [])
    if diary_entries:
        export_lines.append("üìù –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è:")
        for entry in diary_entries:
            export_lines.append(f"‚Ä¢ {entry}")

    # –ê–Ω–∫–µ—Ç–∞
    symptoms = data.get("symptoms", {}).get(today)
    if symptoms:
        export_lines.append("üìã –ê–Ω–∫–µ—Ç–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è:")
        export_lines.append(f"- –°–æ–Ω: {symptoms['sleep']}")
        export_lines.append(f"- –ê–ø–ø–µ—Ç–∏—Ç: {symptoms['appetite']}")
        export_lines.append(f"- –í–æ–¥–∞: {symptoms['water']} –ª")
        export_lines.append(f"- –ë–æ–ª—å: {symptoms['pain']}")

    await message.answer("\n".join(export_lines))

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(export_handler, commands=["export"])
    dp.register_message_handler(export_handler, Text(equals="üì§ –≠–∫—Å–ø–æ—Ä—Ç"))