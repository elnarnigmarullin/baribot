from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from utils.storage import load_data, save_data
from utils.calculations import calculate_bmi

# –®–∞–≥–∏ –≤–≤–æ–¥–∞
class IMTState(StatesGroup):
    waiting_for_height = State()
    waiting_for_weight = State()

# –°—Ç–∞—Ä—Ç ‚Äî –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ /imt
async def imt_start(message: types.Message):
    await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    await IMTState.waiting_for_height.set()

# –ü–æ–ª—É—á–∞–µ–º —Ä–æ—Å—Ç
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = int(message.text)
        if not 100 <= height <= 250:
            raise ValueError
        await state.update_data(height=height)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")
        await IMTState.waiting_for_weight.set()
    except ValueError:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 100 –¥–æ 250 —Å–º.")

# –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å, —Å—á–∏—Ç–∞–µ–º –ò–ú–¢
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if not 30 <= weight <= 300:
            raise ValueError
        data = await state.get_data()
        height = data["height"]
        bmi = calculate_bmi(weight, height)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        user_id = str(message.from_user.id)
        all_data = load_data()
        all_data[user_id] = all_data.get(user_id, {})
        all_data[user_id]["imt"] = bmi
        save_data(all_data)

        await message.answer(f"‚úÖ –í–∞—à –ò–ú–¢: {bmi}")
        await state.finish()
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º –æ—Ç 30 –¥–æ 300 –∫–≥.")

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(imt_start, commands=["imt"], state="*")
    dp.register_message_handler(imt_start, Text(equals="üìè –ò–ú–¢"), state="*")
    dp.register_message_handler(process_height, state=IMTState.waiting_for_height)
    dp.register_message_handler(process_weight, state=IMTState.waiting_for_weight)